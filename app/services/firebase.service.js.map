{"version":3,"file":"firebase.service.js","sourceRoot":"","sources":["../../Users/adriancarriger/pv/site/tmp/broccoli_type_script_compiler-input_base_path-q8wR28Kh.tmp/0/src/app/services/firebase.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAA8B,WAAW,CAAC,CAAA;AAE1C,IAAM,cAAc,GAAM,sBAAa,WAAQ,CAAC;AAKhD;IAIE;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,QAAQ,CAAC,sBAAa,CAAC,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,cAAc,CAAC,CAAC;IACjD,CAAC;IAED,6FAA6F;IAC7F,8BAAI,GAAJ,UAAK,KAAK;QACR,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAC,KAAK,EAAE,QAAQ;YACtD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YACtC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;IAChB,mCAAS,GAAT;QACI,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YACzC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAE,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,CAAC;YAC9D,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,QAAQ;gBAChC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;YAC9B,CAAC,EAAE,UAAU,WAAW;gBACtB,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;QAER,CAAC;IACL,CAAC;IACD,wCAAc,GAAd;QACE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAE,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,CAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACxB,CAAC;IArCH;QAAC,iBAAU,EAAE;;uBAAA;IAuCb,sBAAC;AAAD,CAAC,AAtCD,IAsCC;AAtCY,uBAAe,kBAsC3B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FIREBASE_ROOT } from '../config';\n\nconst FIREBASE_TESTS = `${FIREBASE_ROOT}/tests`;\n\ndeclare let Firebase: any;\n\n@Injectable()\nexport class FirebaseService {\n  public rootRef;\n  public testsRef;\n\n  constructor() {\n      this.rootRef = new Firebase(FIREBASE_ROOT);\n      this.testsRef = new Firebase(FIREBASE_TESTS);\n  }\n\n  // Firebase Custom Authentication - https://www.firebase.com/docs/web/guide/login/custom.html\n  auth(token) {\n    this.rootRef.authWithCustomToken(token, (error, authData) => {\n      if (error) {\n        console.log('Login Failed!', error);\n      } else {\n        localStorage.setItem('uid', authData.uid);\n      }\n    });\n  }\n\n  // Test Examples\n  getMyTest() {\n      if (localStorage.getItem('uid') !== null) {\n        let meow = this.testsRef.child( localStorage.getItem('uid') );\n        meow.on('value', function(snapshot) {\n          console.log(snapshot.val());\n        }, function (errorObject) {\n          console.log('The read failed: ' + errorObject.code);\n        });\n      } else {\n        // console.log('null localStorage');\n      }\n  }\n  setMyWriteTest() {\n    let meow = this.testsRef.child( localStorage.getItem('uid') );\n    meow.set('meow-set!');\n  }\n\n}\n"]}