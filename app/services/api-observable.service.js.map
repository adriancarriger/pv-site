{"version":3,"file":"api-observable.service.js","sourceRoot":"","sources":["../../Users/adriancarriger/pv/site/tmp/broccoli_type_script_compiler-input_base_path-q8wR28Kh.tmp/0/src/app/services/api-observable.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,QAAO,yBAAyB,CAAC,CAAA;AACjC,wBAAwB,cAAc,CAAC,CAAA;AACvC,qBAAqB,eAAe,CAAC,CAAA;AACrC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,sCAAoC,yBAAyB,CAAC,CAAA;AAG9D;IAQE,8BAAmB,IAAU,EAAS,mBAAwC;QAA3D,SAAI,GAAJ,IAAI,CAAM;QAAS,wBAAmB,GAAnB,mBAAmB,CAAqB;QAJtE,gBAAW,GAAG;YACpB,IAAI,EAAE,KAAK;YACX,GAAG,EAAE,KAAK;SACX,CAAC;QAEA,IAAI,CAAC,SAAS,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAO,EAAE,CAAC;IACnC,CAAC;IAED,sCAAO,GAAP,UAAQ,SAAS;QACf,IAAI,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,EAAE;YACtD,MAAM,EAAE,YAAY;SACvB,CAAC;aACD,GAAG,CAAE,UAAC,YAAY;YACjB,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAI,0CAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QACzC,CAAC;;;OAAA;IAED,0CAAW,GAAX,UAAY,GAAI;QAAhB,iBAiBC;QAhBC,IAAI,OAAO,CAAC;QACZ,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,IAAI,CAAC,OAAO,CAAE,CAAC;YACtC,MAAM,CAAC;QACT,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACf,OAAO,GAAG,aAAa,CAAC;YACxB,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,GAAG,eAAe,CAAC;YAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;aAC5B,SAAS,CAAC,UAAA,IAAI;YACb,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAE,KAAI,CAAC,OAAO,CAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IA7CH;QAAC,iBAAU,EAAE;;4BAAA;IA+Cb,2BAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,4BAAoB,uBA8ChC,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/add/operator/share';\nimport { Subject } from 'rxjs/Subject';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { SearchParamsService } from './search-params.service';\n\n@Injectable()\nexport class ApiObservableService {\n  private preSermons$;\n  private sermons;\n  private dataStore: {};\n  private haveSermons = {\n    base: false,\n    all: false\n  };\n  constructor(public http: Http, public searchParamsService: SearchParamsService) {\n    this.dataStore = { sermons: [] };\n    this.preSermons$ = new Subject();\n  }\n\n  observe(paramsObj) {\n    let searchParams = this.searchParamsService.transform(paramsObj);\n    return this.http.get('http://pvbiblechurch.com/app-api/', {\n        search: searchParams\n    })\n    .map( (responseData) => {\n      return responseData.json();\n    });\n  }\n\n  get sermons$() {\n    return this.preSermons$.asObservable();\n  }\n\n  loadSermons(all?) {\n    let preType;\n    if (this.haveSermons.all) {\n      this.preSermons$.next( this.sermons );\n      return;\n    } else if (all) {\n      preType = 'sermons-all';\n      this.haveSermons.all = true;\n    } else {\n      preType = 'sermons-array';\n      this.haveSermons.base = true;\n    }\n    this.observe({type: preType})\n    .subscribe(data => {\n      this.sermons = data;\n      this.preSermons$.next( this.sermons );\n    });\n  }\n\n}\n\n"]}