{"version":3,"file":"audio.service.js","sourceRoot":"","sources":["../../src/app/services/audio.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, Renderer } from '@angular/core';\nimport { ApiObservableService } from './api-observable.service';\nimport { Subject } from 'rxjs/Subject';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class AudioService {\n  public preCurrentAudio$;\n  public preAudioPosition$;\n  public testInfo;\n  listenFunc: Function;\n  metaData: Function;\n  public current = {\n    id: 0,\n    playing: false,\n    init: false,\n    title: '',\n    speaker: '',\n    duration: '',\n    art: {},\n    randomClass: ''\n  };\n  public audioObjects = {}\n  public sermons;\n  constructor(public apiObservableService: ApiObservableService, public renderer: Renderer) {\n    this.preCurrentAudio$ = new Subject();\n    this.preAudioPosition$ = new Subject();\n    this.apiObservableService.sermons$\n    .subscribe(data => {\n      this.sermons = data;\n    });\n\n  }\n  play(setCurrent) {\n    let oldId = this.current.id;\n    if (this.current.id === 0 || (setCurrent !== undefined && setCurrent !== this.current.id)) {\n      this.pause();\n      this.current.id = setCurrent;\n      // Create new audio object\n      if (!(this.current.id in this.audioObjects)) {\n        this.audioObjects[this.current.id] = new Audio();\n        this.audioObjects[this.current.id].src = this.sermons[this.current.id]['audio'];\n        this.current.init = true;\n        this.metaData = this.renderer.listen(\n          this.audioObjects[this.current.id], 'timeupdate', (event) => {\n            this.getDuration();\n        });\n\n      } else {\n        this.current.duration = this.displayTime( this.audioObjects[this.current.id].duration );\n      }\n    }\n    if (this.current.playing === false) {\n      // Start Audio \n      this.updateListeners(oldId);\n      this.audioObjects[this.current.id].play();\n      this.current.playing = true;\n      this.current.title = this.sermons[this.current.id].name;\n      this.current.speaker = this.sermons[this.current.id].speaker;\n      this.current.art = this.sermons[this.current.id].art;\n      this.preCurrentAudio$.next(this.current);\n    }\n  }\n  pause() {\n    if (this.current.id in this.audioObjects) {\n      this.audioObjects[this.current.id].pause();\n      this.current.playing = false;\n      this.preCurrentAudio$.next(this.current);\n    }\n  }\n\n  updateListeners(oldId) {\n    if (oldId !== 0) {\n      this.listenFunc();\n    }\n    this.listenFunc = this.renderer.listen(\n      this.audioObjects[this.current.id], 'timeupdate', (event) => {\n        this.updatePosition();\n    });\n  }\n\n  getDuration() {\n    this.current.duration = this.displayTime( this.audioObjects[this.current.id].duration );\n    this.metaData();\n    this.preCurrentAudio$.next(this.current);\n  }\n\n  updatePosition() {\n    let duration = ~~this.audioObjects[this.current.id].duration;\n    let position = ~~this.audioObjects[this.current.id].currentTime;\n    let percentage = (position / duration) * 100;\n    let displayPosition = this.displayTime(position);\n    this.preAudioPosition$.next({\n      percentage: percentage,\n      time: displayPosition\n    });\n\n  }\n\n  initCurrent() {\n    this.preCurrentAudio$.next(this.current);\n  }\n\n  displayTime(seconds) {\n    let milliseconds = seconds * 1000;\n    let displayTime = moment.utc( milliseconds ).format('mm:ss');\n    let hours = moment.utc( milliseconds ).format('h');\n    if (milliseconds >= 3600000 ) { // If >= 1 hour\n      displayTime = hours + ':' + displayTime;\n    }\n    return displayTime;\n  }\n\n  get currentAudio$() {\n    return this.preCurrentAudio$.asObservable();\n  }\n\n  get audioPosition$() {\n    return this.preAudioPosition$.asObservable();\n  }\n\n  setPosition(percentage) {\n    let newPosition = ~~this.audioObjects[this.current.id].duration * percentage * 0.01;\n    this.audioObjects[this.current.id].currentTime = newPosition;\n  }\n  \n}\n"]}